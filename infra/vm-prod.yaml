#cloud-config
# vim: syntax=yaml
users:
  - name: root
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOYD8Uz5K5AlMoHPLGSCR4j/erxxh22E41WcfQwYRYzv ikashapov-ed25519-20221111

  - name: prj
    uid: 1000
    shell: /usr/sbin/nologin
    no_create_home: true

  - name: ikashapov
    groups: sudo
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOYD8Uz5K5AlMoHPLGSCR4j/erxxh22E41WcfQwYRYzv ikashapov-ed25519-20221111

  - name: alekseev
    groups: sudo
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAcaQy9ncwr3l26+tTdch5g2lsmoVjngGZ4LUlPJCBe9 aeg-eddsa-key-20221121

  - name: baydakov
    groups: sudo
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL1VAlwoHe7E0NyMt4Ktet+RaD95HxYKE1BH2VsONw5U baydakov@note
  
  - name: gruzdov
    groups: sudo
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIrHF1EVikxH5RqKKx3Hu9AjL/3rteZHfPpWlgLqWSc+ tn key

write_files:
-   encoding: b64
    content: |
        AAAAAQAAABRhYmpsNTQ2dXFvdTUycXNjOTNjYgAAABCDTal9vFP+5tk6WaNplhllAAAADPgybniy
        fnGPsRHpaBnhQ5U8gjq33H5M1dMUyz1xy/1jigyCXFbB07S4aVZGfQklgTvMLggKfqX60Q3gMc5j
        DN23HG3cB2muWGy2T8b8SLRfIOARXROwrDhUByou1bbe26gSv6V6eEPJPO9JcuGXA5HaUZHGPJo1
        CfD36DtNb16f5n/OfNqFsyDtzHLTeONHffc5ZZkza9guJeQ3kbZ6VgVo+jz81eZKU5xn1hgmYopR
        RHtNLlVwchdm25PtnMYG4KkL9tGxKHmpVNvBoJWqywuUTg4gaHKLN2NBpdvuinchg9T4+avbeXuA
        W1KV2b7mT2J13O6aXvLhDzeCIQ/K+OrNtennMJsnoVcls92jT2kTm2rCDWKOrXENtnJPSFu5Jgj3
        0LLmGFp51S+dspIMivgVPj/xrkih4ySp6Ysxg/um8eEhFjKgy2mIgWgZJShaSlhR0nIdpV6+MInT
        hxdqU1w3IP/0XztERCfJU517n6x7O19CatMrPjflT+64RRMjgq45ST9pPmJD5xr9cIr3OnHOv/A9
        vEYmV7oLi1FsysFWYFTMIZ1u5LZ5TGRwnyIxJCRZCW76MrE=    
    owner: root:root
    path: /root/.ssh/id_ed25519.enc
    permissions: '0600'
-   content: |
        ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIENtkSaAiZ+xBRArm4nSZzG8INpbr9P3krwzM/u6Y90w github-deploy-netbox
    owner: root:root
    path: /root/.ssh/id_ed25519.pub
    permissions: '0644'


# Update apt database on first boot (run 'apt-get update').
# Note, if packages are given, or package_upgrade is true, then
# update will be done independent of this setting.
#
# Default: false
# Aliases: apt_update
package_update: true

# Upgrade the instance on first boot
# (ie run apt-get upgrade)
#
# Default: false
# Aliases: apt_upgrade
package_upgrade: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - software-properties-common
  - jq
  - git

timezone: "Europe/Moscow"

# Install Docker, for production, consider pinning to stable versions
runcmd:
  - echo "docker install:" + $(TZ=":Europe/Moscow" date +"%FT%T%z")
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - apt-get update -y
  - apt-get install -y docker-ce docker-ce-cli containerd.io
  - systemctl start docker
  - systemctl enable docker
  - usermod -aG docker ikashapov
  - usermod -aG docker alekseev
  - usermod -aG docker baydakov
  - usermod -aG docker gruzdov
  - usermod -aG docker prj
  - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - curl -L "https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose" -o /etc/bash_completion.d/docker-compose
  - chmod +x /usr/local/bin/docker-compose
  - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
  - echo "yc install:" + $(TZ=":Europe/Moscow" date +"%FT%T%z")
  - export HOME=/root
  - curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /opt/yandex-cloud -n
  #- /opt/yandex-cloud/bin/yc version
  - /opt/yandex-cloud/bin/yc config profile create sa-profile
  - /opt/yandex-cloud/bin/yc config set cloud-id b1g94vb73dlv93sq1kso
  - /opt/yandex-cloud/bin/yc config set folder-id b1gv6c0emfiv0foqmguf
  # Generate an SSH key pair
  # https://docs.gitlab.com/ee/ssh/#ed25519-ssh-keys
  # ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519 -C "matem@matem.ru"
  # KMS encrypt ssh key
  # /opt/yandex-cloud/bin/yc kms symmetric-crypto encrypt --id abj1rkgejvkkl49v287u --plaintext-file .ssh/id_ed25519 --ciphertext-file .ssh/id_ed25519.enc
  # base64 .ssh/id_ed25519.enc
  # paste to section "write_files"
  # cat .ssh/id_ed25519.pub
  # paste to section "write_files"
  # and add to GitHub Deployment keys: https://github.com/ikashapov/infra-%repo%/settings/keys
  - /opt/yandex-cloud/bin/yc kms symmetric-crypto decrypt --id abj1rkgejvkkl49v287u --ciphertext-file /root/.ssh/id_ed25519.enc --plaintext-file /root/.ssh/id_ed25519
  - usermod -L prj
  - mkdir -p /opt/prj
  - echo "git clone:" + $(TZ=":Europe/Moscow" date +"%FT%T%z")
  - cd /opt/prj
  - curl -L https://api.github.com/meta | jq -r '.ssh_keys | .[]' | sed -e 's/^/github.com /' >> ~/.ssh/known_hosts
  - /usr/bin/git clone git@github.com:ikashapov/infra-netbox.tn.ru.git
  - cd /opt/prj/infra-netbox.tn.ru
  # - echo "pg_restore.stage:" + $(TZ=":Europe/Moscow" date +"%FT%T%z")
  # - wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" -O ./volume/pg_root.crt && chmod 0640 ./volume/pg_root.crt
  # - chmod a+r ./volume/pg_root.crt
  # - docker run --mount type=bind,source=$(pwd),target=/repo --rm postgres bash /repo/pg_restore.stage.sh | tee pg_restore.stage.log
  - chown 1000:999 -R /opt/prj
  - chmod g+w -R /opt/prj
  - chmod +x ./up.sh
  - sed -i "s/DEPLOYMENT=stage/DEPLOYMENT=prod/g" .build.deployment
  - /usr/bin/docker-compose version
  - /usr/bin/timedatectl
  - systemctl status systemd-timesyncd.service
  - echo "run ./up.sh:" + $(TZ=":Europe/Moscow" date +"%FT%T%z")
  - ./up.sh
  - chmod 644 /var/log/cloud-init-output.log
  - echo "end runcmd:" + $(TZ=":Europe/Moscow" date +"%FT%T%z")

# phone_home: if this dictionary is present, then the phone_home
# cloud-config module will post specified data back to the given
# url
# default: none
# phone_home:
#   url: http://my.foo.bar/$INSTANCE/
#   post: all
#   tries: 10
#
# url call afrer runcmd and before power_state last reboot
phone_home:
  url: https://functions.yandexcloud.net/d4enq8mqnq807snplq9i
  #post: [ pub_key_dsa, pub_key_rsa, pub_key_ecdsa, instance_id ]
  post: all
  tries: 1

## poweroff or reboot system after finished
# default: none
#
# power_state can be used to make the system shutdown, reboot or
# halt after boot is finished.  This same thing can be acheived by
# user-data scripts or by runcmd by simply invoking 'shutdown'.
# 
# Doing it this way ensures that cloud-init is entirely finished with
# modules that would be executed, and avoids any error/log messages
# that may go to the console as a result of system services like
# syslog being taken down while cloud-init is running.
#
# If you delay '+5' (5 minutes) and have a timeout of
# 120 (2 minutes), then the max time until shutdown will be 7 minutes.
# cloud-init will invoke 'shutdown +5' after the process finishes, or
# when 'timeout' seconds have elapsed.
#
# delay: form accepted by shutdown.  default is 'now'. other format
#        accepted is +m (m in minutes)
# mode: required. must be one of 'poweroff', 'halt', 'reboot'
# message: provided as the message argument to 'shutdown'. default is none.
# timeout: the amount of time to give the cloud-init process to finish
#          before executing shutdown.
# condition: apply state change only if condition is met.
#            May be boolean True (always met), or False (never met),
#            or a command string or list to be executed.
#            command's exit code indicates:
#               0: condition met
#               1: condition not met
#            other exit codes will result in 'not met', but are reserved
#            for future use.
#
power_state:
  #delay: "+1"
  mode: reboot
  timeout: 30
  condition: True
